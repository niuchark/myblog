import{_ as i,c as a,a as e,o as n}from"./app-Cwg-pqKw.js";const t={};function l(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<p>在JavaScript中，<code>var</code>, <code>let</code>, 和 <code>const</code> 是三种不同的关键字，用于声明变量，但它们之间有一些关键的区别和用法上的差异。</p><h3 id="_1-var" tabindex="-1"><a class="header-anchor" href="#_1-var"><span>1. <code>var</code></span></a></h3><ul><li><strong>函数作用域或全局作用域</strong>：使用 <code>var</code> 声明的变量具有函数作用域或全局作用域，这意味着如果变量在函数内部使用 <code>var</code> 声明，它将仅在该函数内部可用。如果在函数外部使用 <code>var</code>，则变量将成为全局变量。</li><li><strong>可以重复声明</strong>：在同一作用域内，可以使用 <code>var</code> 多次声明同一个变量名，后面的声明会覆盖之前的值。</li><li><strong>没有块级作用域</strong>：<code>var</code> 声明的变量不具备块级作用域（例如在 <code>if</code> 语句或 <code>for</code> 循环中的大括号内），这意味着在块级作用域内部声明的变量在外部也是可见的。</li></ul><p><strong>示例</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> example</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出: 5</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">example</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-let" tabindex="-1"><a class="header-anchor" href="#_2-let"><span>2. <code>let</code></span></a></h3><ul><li><strong>块级作用域</strong>：使用 <code>let</code> 声明的变量具有块级作用域，这意味着它们仅在声明它们的块、语句，或者子块（如 <code>if</code> 语句或 <code>for</code> 循环）内部可用。</li><li><strong>不允许重复声明</strong>：在同一作用域内，不能使用 <code>let</code> 多次声明同一个变量名。如果尝试这样做，将会抛出语法错误。</li><li><strong>暂时性死区（Temporal Dead Zone, TDZ）</strong>：在 <code>let</code> 声明之前访问变量会导致引用错误（ReferenceError）。</li></ul><p><strong>示例</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> example</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // ReferenceError: x is not defined</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">example</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-const" tabindex="-1"><a class="header-anchor" href="#_3-const"><span>3. <code>const</code></span></a></h3><ul><li><strong>块级作用域</strong>：与 <code>let</code> 一样，<code>const</code> 也具有块级作用域。</li><li><strong>必须初始化</strong>：使用 <code>const</code> 声明变量时必须初始化，即必须有一个初始值。</li><li><strong>值不可变</strong>：一旦为 <code>const</code> 声明的变量赋值后，其值就不能改变（注意，对于对象或数组，这指的是不能再将变量指向另一个对象或数组，但对象的属性或数组的元素仍然可以被修改）。</li><li><strong>不允许重复声明</strong>：在同一作用域内，不能使用 <code>const</code> 多次声明同一个变量名。</li></ul><p><strong>示例</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> example</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // ReferenceError: x is not defined</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">example</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li>使用 <code>var</code> 可以声明具有函数作用域或全局作用域的变量，且可以重复声明。</li><li>使用 <code>let</code> 可以声明具有块级作用域的变量，且不允许重复声明。</li><li>使用 <code>const</code> 可以声明只读的、具有块级作用域的常量，必须在声明时初始化，且一旦赋值后其值不可改变（除非是对象或数组的内容变化）。</li></ul><p>推荐尽可能使用 <code>let</code> 和 <code>const</code> 来代替 <code>var</code>，因为它们提供了更清晰的作用域控制和更少的潜在错误。在现代JavaScript开发中，通常避免使用 <code>var</code>。</p>`,16)]))}const p=i(t,[["render",l]]),d=JSON.parse('{"path":"/home/tdwhqdaz/","title":"let/const/var的区别","lang":"zh-CN","frontmatter":{"title":"let/const/var的区别","createTime":"2025/08/06 17:37:08","permalink":"/home/tdwhqdaz/","description":"在JavaScript中，var, let, 和 const 是三种不同的关键字，用于声明变量，但它们之间有一些关键的区别和用法上的差异。 1. var 函数作用域或全局作用域：使用 var 声明的变量具有函数作用域或全局作用域，这意味着如果变量在函数内部使用 var 声明，它将仅在该函数内部可用。如果在函数外部使用 var，则变量将成为全局变量。 可...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"let/const/var的区别\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-08T13:46:42.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://niuck.cn/home/tdwhqdaz/"}],["meta",{"property":"og:site_name","content":"宁采柯的小窝"}],["meta",{"property":"og:title","content":"let/const/var的区别"}],["meta",{"property":"og:description","content":"在JavaScript中，var, let, 和 const 是三种不同的关键字，用于声明变量，但它们之间有一些关键的区别和用法上的差异。 1. var 函数作用域或全局作用域：使用 var 声明的变量具有函数作用域或全局作用域，这意味着如果变量在函数内部使用 var 声明，它将仅在该函数内部可用。如果在函数外部使用 var，则变量将成为全局变量。 可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-08T13:46:42.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-08T13:46:42.000Z"}]]},"readingTime":{"minutes":2.43,"words":729},"git":{"createdTime":1754660802000,"updatedTime":1754660802000,"contributors":[{"name":"niuchark","username":"niuchark","email":"3248234300@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/niuchark?v=4","url":"https://github.com/niuchark"}]},"autoDesc":true,"filePathRelative":"notes/home/2.八股详解/let-const-var.md","headers":[]}');export{p as comp,d as data};
