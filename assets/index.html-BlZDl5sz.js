import{_ as i,c as a,a as e,o as n}from"./app-Cwg-pqKw.js";const t={};function l(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h3 id="解释-为什么父级设置特定属性会导致-position-fixed-的定位基准改变" tabindex="-1"><a class="header-anchor" href="#解释-为什么父级设置特定属性会导致-position-fixed-的定位基准改变"><span>解释：为什么父级设置特定属性会导致 <code>position: fixed</code> 的定位基准改变？</span></a></h3><p>在 CSS 中，<strong><code>position: fixed</code> 的默认定位基准是浏览器视口（viewport）</strong>。但当父级元素设置了以下任意属性时，会创建一个 <strong>新的包含块（containing block）</strong>，导致 <code>fixed</code> 定位的子元素改为<strong>相对于该父级元素定位</strong>：</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">transform: 非 none 值;       </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 例如 transform: translate(0) */</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">perspective: 非 none 值;     </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 例如 perspective: 100px */</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">filter</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: 非 none 值;          </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 例如 filter: blur(0) */</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">backdrop-filter</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: 非 none 值; </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 例如 backdrop-filter: blur(0) */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="属性详解及影响原理" tabindex="-1"><a class="header-anchor" href="#属性详解及影响原理"><span>属性详解及影响原理</span></a></h3><h4 id="_1-transform" tabindex="-1"><a class="header-anchor" href="#_1-transform"><span>1. <strong><code>transform</code></strong></span></a></h4><ul><li><strong>作用</strong>：对元素进行 2D/3D 变换（移动、旋转、缩放等）。</li><li><strong>为何影响定位</strong>：<br> 浏览器需要为变换元素创建独立的<strong>渲染层（Layer）</strong>。此时子元素的 <code>fixed</code> 定位会被限制在该层的坐标系内，形成新的包含块。<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">parent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  transform</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> scale</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> /* 即使无视觉变化，也会改变定位基准 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="为什么-transform-属性会触发浏览器创建独立渲染层" tabindex="-1"><a class="header-anchor" href="#为什么-transform-属性会触发浏览器创建独立渲染层"><span>为什么 <code>transform</code> 属性会触发浏览器创建独立渲染层？</span></a></h5><p>浏览器为 <code>transform</code> 属性创建独立渲染层（Layer）的核心原因是为了<strong>优化渲染性能</strong>和<strong>确保视觉效果的正确性</strong>。这涉及到浏览器渲染引擎的工作机制，具体可分为以下三个关键点：</p><hr><h5 id="一、性能优化-gpu加速与合成-compositing" tabindex="-1"><a class="header-anchor" href="#一、性能优化-gpu加速与合成-compositing"><span>一、性能优化：GPU加速与合成（Compositing）</span></a></h5><ol><li><p><strong>分离渲染任务</strong>：</p><ul><li>当元素设置 <code>transform</code> 时，浏览器会将其提升到<strong>独立的图形层（Graphics Layer）</strong>。</li><li>该层的内容会被缓存在 GPU 纹理（Texture）中，后续的移动/旋转/缩放等变换只需操作这个纹理，无需重新计算布局（Layout）和绘制（Paint）。</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">box</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  transform</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> translateZ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> /* 经典的性能优化技巧：强制创建独立层 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>减少重绘成本</strong>：</p><ul><li>普通元素变化时，浏览器需要重新计算整个渲染树。</li><li>独立层的变换（如动画）只需 GPU 合成，跳过 CPU 的重排（Reflow）和重绘（Repaint）。</li></ul></li></ol><hr><h5 id="二、视觉隔离-保持变换上下文" tabindex="-1"><a class="header-anchor" href="#二、视觉隔离-保持变换上下文"><span>二、视觉隔离：保持变换上下文</span></a></h5><ol><li><p><strong>3D 空间一致性</strong>：</p><ul><li><code>transform</code> 和 <code>perspective</code> 建立了一个<strong>新的 3D 渲染上下文</strong>。</li><li>子元素的所有变换（包括 <code>fixed</code> 定位）必须基于此上下文计算，否则会导致空间错乱：<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">parent</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> style</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">perspective: 1000px</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- 子元素必须基于父级的透视空间渲染 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">child</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> style</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">position: fixed</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>滤镜隔离</strong>：</p><ul><li><code>filter</code> 和 <code>backdrop-filter</code> 需要将元素内容<strong>离屏渲染</strong>再应用效果。</li><li>独立层确保滤镜不影响其他元素，且效果能正确叠加。</li></ul></li></ol><hr><h5 id="三、浏览器渲染管线的工作机制" tabindex="-1"><a class="header-anchor" href="#三、浏览器渲染管线的工作机制"><span>三、浏览器渲染管线的工作机制</span></a></h5><p>浏览器渲染流程中的关键阶段：</p><ol><li><strong>Layout</strong>：计算元素大小/位置 → <strong>CPU 密集型</strong></li><li><strong>Paint</strong>：填充像素到位图 → <strong>CPU 密集型</strong></li><li><strong>Compositing</strong>：合并层到屏幕 → <strong>GPU 加速</strong></li></ol><p>当元素设置 <code>transform</code> 时：</p><ul><li>浏览器将其标记为 <strong>&quot;合成器层（Compositing Layer）&quot;</strong></li><li>该元素直接跳过 Layout/Paint 阶段</li><li>变换操作由 GPU 在 Compositing 阶段高效完成</li></ul><hr><h5 id="为什么这会影响-position-fixed" tabindex="-1"><a class="header-anchor" href="#为什么这会影响-position-fixed"><span>为什么这会影响 <code>position: fixed</code>？</span></a></h5><ol><li><p><strong>坐标系隔离</strong>：</p><ul><li>独立层创建了<strong>新的局部坐标系</strong></li><li><code>position: fixed</code> 本应基于视口（viewport），但被强制锁定在父级层的坐标系内</li></ul></li><li><p><strong>规范要求</strong>：</p><ul><li>CSS 变换规范明确规定： <blockquote><p>&quot;If the element has <code>position: fixed</code>, the containing block is established by the nearest <strong>transform container</strong>.&quot;</p></blockquote></li><li>这个 &quot;transform container&quot; 就是由 <code>transform/perspective/filter</code> 创建的独立层</li></ul></li></ol><hr><h5 id="类比解释-舞台表演的比喻" tabindex="-1"><a class="header-anchor" href="#类比解释-舞台表演的比喻"><span>类比解释：舞台表演的比喻</span></a></h5><p>想象浏览器视口是一个大舞台：</p><ol><li><strong>普通元素</strong>：直接在舞台上表演（基于全局坐标系）</li><li><strong>带 <code>transform</code> 的父级</strong>： <ul><li>相当于舞台上搭了个<strong>旋转平台（独立层）</strong></li><li>所有站在平台上的演员（子元素），包括声称&quot;固定位置&quot;（<code>position: fixed</code>）的演员</li><li>他们的&quot;固定&quot;只能是相对于旋转平台，而非整个舞台</li></ul></li></ol><hr><h5 id="开发者视角-如何验证" tabindex="-1"><a class="header-anchor" href="#开发者视角-如何验证"><span>开发者视角：如何验证？</span></a></h5><p>在 Chrome DevTools 中：</p><ol><li>打开 <strong>More Tools → Layers</strong> 面板</li><li>观察设置 <code>transform</code> 的元素是否出现<strong>橙色边框</strong>（表示独立层）</li><li>滚动/变换时注意该层是否单独移动（与其他内容分离）</li></ol><p><img src="https://wd.imgix.net/image/admin/5ELuM2arx6dNlFe6jFpZ.png?auto=format" alt="Chrome Layers Panel"></p><hr><h4 id="_2-perspective" tabindex="-1"><a class="header-anchor" href="#_2-perspective"><span>2. <strong><code>perspective</code></strong></span></a></h4><ul><li><strong>作用</strong>：设置 3D 变换的透视距离（模拟深度效果）。</li><li><strong>为何影响定位</strong>：<br> 透视效果需要独立的 3D 渲染上下文，这会强制子元素的 <code>fixed</code> 定位基于该上下文重新计算。<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">parent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  perspective</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> /* 子元素 fixed 将相对于此父级定位 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-filter-与-backdrop-filter" tabindex="-1"><a class="header-anchor" href="#_3-filter-与-backdrop-filter"><span>3. <strong><code>filter</code></strong> 与 <strong><code>backdrop-filter</code></strong></span></a></h4><ul><li><strong>作用</strong>： <ul><li><code>filter</code>：为元素添加视觉效果（模糊、颜色调整等）。</li><li><code>backdrop-filter</code>：为元素<strong>背后的区域</strong>添加效果（如毛玻璃效果）。</li></ul></li><li><strong>为何影响定位</strong>：<br> 滤镜需要离屏渲染，浏览器会创建新的包含块以确保滤镜效果正确应用。<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">parent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  filter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> blur</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> /* 即使无效果，也会改变定位基准 */</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  backdrop-filter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> brightness</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">100</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="核心原因-层叠上下文-stacking-context-与渲染层" tabindex="-1"><a class="header-anchor" href="#核心原因-层叠上下文-stacking-context-与渲染层"><span>核心原因：<strong>层叠上下文（Stacking Context）与渲染层</strong></span></a></h3><p>这些属性会触发以下机制：</p><ol><li><strong>创建新的包含块</strong>：浏览器为这些元素生成独立的坐标系。</li><li><strong>隔离渲染层</strong>：为确保视觉效果（如滤镜、3D变换）不影响外部布局，子元素被限制在该层内。</li><li><strong><code>fixed</code> 定位降级</strong>：原本相对于视口的定位，被限制在父级的渲染层中，表现为类似 <code>position: absolute</code> 的行为。</li></ol><hr><h3 id="示例演示" tabindex="-1"><a class="header-anchor" href="#示例演示"><span>示例演示</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">parent</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> &lt;!-- 设置了 transform --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fixed-child</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fixed 元素</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">parent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  transform</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> translate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> /* 导致 .fixed-child 基于父级定位 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fixed-child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  position</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> fixed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  top</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> /* 不再相对于视口顶部，而是父级顶部 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="解决方案-避免定位异常" tabindex="-1"><a class="header-anchor" href="#解决方案-避免定位异常"><span>解决方案：避免定位异常</span></a></h3><ol><li><p><strong>将弹窗移至顶层</strong>：<br> 确保弹窗的直接父级是 <code>&lt;body&gt;</code>，避免中间元素触发新包含块。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- 其他内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">modal</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">弹窗</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> &lt;!-- 直接放在 body 下 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>检查父级样式</strong>：<br> 排查父级是否使用了 <code>transform/filter/perspective</code> 等属性，必要时重置为 <code>none</code>。</p></li><li><p><strong>JavaScript 动态定位</strong>：<br> 手动计算视口位置并设置 <code>top/left</code>（不推荐，复杂且性能低）。</p></li></ol><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><table><thead><tr><th>属性</th><th>用途</th><th>对 <code>fixed</code> 的影响</th></tr></thead><tbody><tr><td><code>transform</code></td><td>元素变换（移动/旋转/缩放）</td><td>创建新包含块，子元素 <code>fixed</code> 相对父级</td></tr><tr><td><code>perspective</code></td><td>3D 透视效果</td><td>同上</td></tr><tr><td><code>filter</code></td><td>元素滤镜（模糊/调色等）</td><td>同上</td></tr><tr><td><code>backdrop-filter</code></td><td>背景区域滤镜</td><td>同上</td></tr></tbody></table><p><strong>根本原因</strong>：浏览器为这些属性创建了独立的渲染层，导致 <code>position: fixed</code> 的定位基准从视口“降级”到父级元素。</p>`,53)]))}const d=i(t,[["render",l]]),p=JSON.parse('{"path":"/home/kksbfixed/","title":"父级属性影响fixed定位","lang":"zh-CN","frontmatter":{"title":"父级属性影响fixed定位","createTime":"2025/08/11 20:52:00","permalink":"/home/kksbfixed/","description":"解释：为什么父级设置特定属性会导致 position: fixed 的定位基准改变？ 在 CSS 中，position: fixed 的默认定位基准是浏览器视口（viewport）。但当父级元素设置了以下任意属性时，会创建一个 新的包含块（containing block），导致 fixed 定位的子元素改为相对于该父级元素定位： 属性详解及影响原理 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"父级属性影响fixed定位\\",\\"image\\":[\\"https://wd.imgix.net/image/admin/5ELuM2arx6dNlFe6jFpZ.png?auto=format\\"],\\"dateModified\\":\\"2025-09-04T13:00:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://niuck.cn/home/kksbfixed/"}],["meta",{"property":"og:site_name","content":"宁采柯的小窝"}],["meta",{"property":"og:title","content":"父级属性影响fixed定位"}],["meta",{"property":"og:description","content":"解释：为什么父级设置特定属性会导致 position: fixed 的定位基准改变？ 在 CSS 中，position: fixed 的默认定位基准是浏览器视口（viewport）。但当父级元素设置了以下任意属性时，会创建一个 新的包含块（containing block），导致 fixed 定位的子元素改为相对于该父级元素定位： 属性详解及影响原理 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wd.imgix.net/image/admin/5ELuM2arx6dNlFe6jFpZ.png?auto=format"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-04T13:00:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-04T13:00:18.000Z"}]]},"readingTime":{"minutes":5.49,"words":1647},"git":{"createdTime":1754906147000,"updatedTime":1756990818000,"contributors":[{"name":"niuchangkang","username":"niuchangkang","email":"niuchangkang@telrobot.top","commits":3,"avatar":"https://avatars.githubusercontent.com/niuchangkang?v=4","url":"https://github.com/niuchangkang"}]},"autoDesc":true,"filePathRelative":"notes/home/2.学习笔记/2.css/fixed.md","headers":[]}');export{d as comp,p as data};
